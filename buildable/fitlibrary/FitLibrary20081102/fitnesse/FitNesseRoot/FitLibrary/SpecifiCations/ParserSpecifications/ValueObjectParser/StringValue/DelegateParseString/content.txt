!3 ''Value Object'' is parsed by a ${parseDelegate}
You may be using a library class, such as a ''Date'', as a ''value object''. But you're unable to change it. So you can use a ${parseDelegate} instead. The ${parseDelegate} needs to be registered to handle parsing of a specific ''value object'' class.
 * We'll pretend that class ''!-MyFixedPoint-!'' is to be a ''value object'', but that we can't alter it to add a ''parse()'' method.
 * So we introduce a ${parseDelegate}, ''!-MyFixedPointDelegate-!''. In Java the delegate class ''!-MyFixedPointDelegate-!'' has a method:
  * ''public !-MyFixedPoint-! parse(String)'' that parses a String into a ''!-MyFixedPoint-!'' object
  * This method is used twice in the first table, to parse (and create) both the value for the argument and the ''expected'' value.
  * It's used once in the second table, to create the argument.
 * In Java, the ''!-MyFixedPoint-!'' class still needs an ''equals()'' method to compare the ''expected'' and ''actual'' values.
  * This is used in the first two tables
 * In Java, the ''!-MyFixedPoint-!'' class also needs a ''toString()'' method to show itself when there is an error
  * This is shown in the second table, where the ''expected'' and the ''actual'' value of the point differ, and so the ''actual value'' needs to be displayed
 * The following is the same as in SelfParseString:
 * If the type of the result of a method call is a value object, it will not be auto-wrapped with a ''!-DomainObjectCheckTraverse-!''.
  * That's so that it can be '''check'''ed in workflow, which is usually what's required
  * So we need to explicitly wrap it in the code if we want to check its properties.
  * This is shown in the third table
 * Similar methods will be required with other programming languages. See the appropriate documentation.
!**< def
!define test {!|fitlibrary.specify.valueObject.ParseMyFixedPointAsStringWithDelegate|

|''actions''|

|'''check'''|a fixed point|(12,34)|(12,34)|

|'''check'''|a fixed point|(12,34)|(0,0)|

|''a fixed point as domain object''|(12,34)|
|x|12|
|y|34|
}
**!
|!-fitlibrary.spec.SpecifyFixture-!|
|${test}|!-<table border="1" cellspacing="0">
<tr><td>fitlibrary.specify.valueObject.ParseMyFixedPointAsStringWithDelegate</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>actions</i></td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><b>check</b></td>
<td>a fixed point</td>
<td>(12,34)</td>
<td class="pass">(12,34)</td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><b>check</b></td>
<td>a fixed point</td>
<td>(12,34)</td>
<td class="fail">(0,0) <span class="fit_label">expected</span><hr>(12,34) <span class="fit_label">actual</span></td>
</tr>
</table>
<br><table border="1" cellspacing="0">
<tr><td><i>a fixed point as domain object</i></td>
<td>(12,34)</td>
</tr>
<tr><td>x</td>
<td class="pass">12</td>
</tr>
<tr><td>y</td>
<td class="pass">34</td>
</tr>
</table>-!|

I'm considering adding optional functionality to the ${parseDelegate} so that it:
 * Can also be responsible for the ''equals()'' check. Then, specialised checking can be provided (such as over a subset of the properties).
 * Can also be responsible for the ''show'' (ie, ''toString()''). Then the display format of the ''value object'' can be controlled. Eg, to display the ''Date'' in the appropropriate format.

