!1 DefinedActions
DefinedActions allow high-level actions to be defined in terms of lower-level actions. For example, business-level actions can be mapped into automatic actions carried out through a web browser, through web services, etc.

These can be applied with any storytests and any fixtures.

Note: The definition of ''defined actions'' will be improved in a later version of ''!-FitLibrary-!'' to avoid the need for includes in ''!-SuiteSetUp-!'' and to avoid the need for nested tables.
!2 1. Defining an Action
Here's an example of an action definition:

!**< hide
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)

**!
|!-fitlibrary.DefineAction-!|
|${getUrlGiving}|

The first row of the table has the fixture ''!-fitlibrary.DefineAction-!''. The second row of the table contains several nested tables. The first of these tables gives the defined action, with the even cells containing parameter names (here, ''URL'' and ''TITLE''). They are in uppercase here, but that's not necessary.

The subsequent (nested) tables give the ''body'' of the ''defined action'', and can include use of the parameters at any point. The example above uses the parameters by themselves in various cells. In general, the parameters can be included with other text.
!2 2. Using a Defined Action
When a defined action is used ("''called''") in a storytest, the ''body'' of the defined action is run after parameter substitution. Consider the following action:

|''get url''|http://localhost:8080|''giving title''|!-FrontPage-!|

This matches the ''defined action'' given above. So the parameter URL takes the value "!-http://localhost:8080-!" and the parameter TITLE takes the value "!-FrontPage-!". These are substituted into the body, to give the following:

|''get url''|http://localhost:8080|

|''title''|'''becomes'''|!-FrontPage-!|

This is then run in the usual way. If further defined actions are used, these are treated in the same way.

If the use of a ''defined action'' passes, the original use is coloured green. Otherwise, it's coloured red or yellow, and the details of what failed are shown in the report.
!2 3. Organising ''defined actions''
Defined actions are a little tricky to manage at the moment. 

I've organised them as child pages of ''!-ActionDefinitions-!''. These are included from there within a ''!-SuiteSetUp-!'' page.

''Defined actions'' currently have to be processed once for a single test or for a suite. This is currently managed by having a ''!-SuiteSetUp-!'' page that includes each of the ''defined actions'' inside ''!-ActionDefinitions-!''.

The page structure looks like this for isBook:
{{{
 * SuiteSetUp
 * ActionDefinitions
   * DiscountVouchers
     * EnterVoucher
   * SaleConfirmation
   * CreateOrder
     * MultilineOrder
   etc
}}}
To add new defined actions, organise them in pages within ''!-ActionDefinitions-!'' and add appropriate includes in ''!-SuiteSetUp-!''.

I'm hoping that this will be much simpler soon. I'll set if up so that all pages within ''!-ActionDefinitions-!'' will automatically be run, without the need to include them in ''!-SuiteSetUp-!''.
!2 4. Wiki Format for ''defined actions''
Here it is shown in wiki format:

----{{{
!**< hide
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)

**!
|!-fitlibrary.DefineTemplate-!|
|!-${getUrlGiving}-!|
}}}----
This, unfortunately, uses lots of messy wiki hieroglyphics!

Let's go through them, step by step.

!3 4.1 Hiding text by folding
The text surrounded by the following is folded up and hidden:
----{{{
!**< hide
...

**!
}}}----
If you want to be able to see the text inside the folded area, replace the "<" by a ">". Then, when not editing the text, you can fold/unfold the text, etc inside that folding area by clicking on the little triangle.

!3 4.2 Defining nested tables
Nested tables can't be written directly in place. They need to be ''defined'' and used as we see above.

A definition has a name and a value (inside brackets). The value may be on a single line, such as:
----{{{
!define date (20 Dec 2009)
}}}----
Or it may be over several lines, such as:
----{{{
!define getUrlGiving (
|''get url''|URL|''giving title''|TITLE|

|''get url''|URL|

|''title''|'''becomes'''|TITLE|
)
}}}----
''!-FitNesse-!'' is fussy about the format of the ''define'':
 * "!define" has to be at the start of the line, without a space in the middle.
 * The name of the define can't have spaces in it. I suggest just using letters and digits.
 * There has to be one space after the name and before the first bracket
 * There can't be a ")" inside the value of the define.
If you need to include a ")" inside the value, uses "{" and "}" instead to delimit the value. Then you can't use "}" inside the value. If you need to use both ")" and "}" you have to break the text up with several !defines so that any define has either one or the other, but not both.

A defined value is used as follows: !-${getUrlGiving}-!. In our example above, we use that to include the nested tables inside the second row of the ''define action'' table.
!2 5. Wiki Format for an ''include''
To include the ''defined actions'' in ''!-SuiteSetUp-!'', an include is used. This is of the form:
----{{{
!include -c ActionDefinitions.GivingTitle
}}}----
The referenced page is included in place in the current page. This approach is used to balance between two requirements:
 * It's handy to have the defined actions in several pages, so they can be organised as the number increases.
 * All the defined actions have to be loaded at once, through the ''!-SuiteSetUp-!'' page that is run at the start of a suite or test being run.
